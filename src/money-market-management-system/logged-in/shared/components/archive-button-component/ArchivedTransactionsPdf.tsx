import { getBase64ImageFromURL, getUser } from "../../../../../shared/functions/MyFunctions";
import { dateFormat_YY_MM_DD } from "../../../../../shared/utils/utils";

interface IProps {
    data:{
        transactionDate: string;
        bankReference: string;
        clientAccount: string;
        clientName: string | undefined;
        amount: number;
        archivedBy: string;
    }[]
}
const generateArchivedTransactionsPDF = async ({ data }: IProps) => {
    const header = await getBase64ImageFromURL(`${process.env.PUBLIC_URL}/headerV2.png`);
    const footer = await getBase64ImageFromURL(`${process.env.PUBLIC_URL}/footerV2.png`);
    const pdfMake = require("pdfmake");

    const docDefinition: any = {
        pageMargins: [40, 160, 40, 160], // Adjusted margins to keep content away from header and footer
        header: {
            stack: [
                {
                    image: header,
                    width: 590,
                    height: 100,
                    margin: [0, 0, 0, 0], // Adjust margin as needed
                    alignment: "center",
                },
                {
                    text: "Archived Transactions",
                    alignment: "center",
                    fontSize: 12,
                    bold: true,
                    margin: [0, 10, 0, 0], // Adjust margin as needed to place the text correctly
                }
            ]
        },
        footer: {
            image: `${footer}`,
            width: 590,
            height: 100,
            margin: [0, 0, 0, 0], // Adjust margin
            alignment: "center"
        },
        content: [
            {
                table: {
                    headerRows: 1,
                    widths: ["auto", "auto", "auto", "auto", "auto","auto"],
                    body: [
                        [
                            { text: "Transaction Date", style: "tableHeader" },
                            { text: "Bank Reference", style: "tableHeader" },
                            { text: "Client Account", style: "tableHeader" },
                            { text: "Client Name", style: "tableHeader" },
                            { text: "Amount", style: "tableHeader" },
                            { text: "Archived By", style: "tableHeader" }
                        ],
                        ...data.map((item) => [
                            { text: dateFormat_YY_MM_DD(item.transactionDate), style: "tableContent" },
                            { text: (item.bankReference), style: "tableContent" },
                            { text: (item.clientAccount), style: "tableContent" },
                            { text: item.clientName, style: "tableContent" },
                            { text: item.amount, style: "tableContent" },
                            { text: item.archivedBy??"", style: "tableContent" }
                        ]),
                    ],
                },
                layout: {
                    hLineWidth: function (i: number, node: any) {
                        return 0.5;
                    },
                    vLineWidth: function (i: number, node: any) {
                        return 0.5;
                    },
                    hLineColor: function (i: number, node: any) {
                        return "#004c98";
                    },
                    vLineColor: function (i: number, node: any) {
                        return "#004c98";
                    },
                },
                margin: [0, 5, 0, 20],
                pageBreakBefore: function (currentNode: any, followingNodesOnPage: any, nodesOnNextPage: any, previousNodesOnPage: any) {
                    return currentNode.startPosition.top + currentNode.table.body.length * 10 > 700;
                }
            },
            {
                canvas: [
                    {
                        type: "rect",
                        x: 0,
                        y: 0,
                        w: 135,
                        h: 16,
                        r: 5,
                        lineColor: "#004c98",
                        color: "#004c98",
                    },
                ],
                margin: [0, -8, 0, 0],
            },
            {
                text: `Generated Date: ${dateFormat_YY_MM_DD(Date.now())}`,
                margin: [3, 14, 0, 0],
                color: "black",
                fontSize: 7,
                bold: true,
            },
            {
                text: "Generated By: IJG Back Office",
                margin: [3, 0, 0, 10],
                color: "black",
                fontSize: 7,
                bold: true,
            },
        ],
        styles: {
            period: {
                fonSize: 5,
                margin: [0, 10, 0, 5],
            },
            subheader: {
                fontSize: 8,
                bold: true,
                margin: [0, 10, 0, 5],
            },
            infoText: {
                fontSize: 7,
                margin: [0, 2, 0, 2],
            },
            tableHeader: {
                bold: true,
                fontSize: 8,
                color: "white",
                fillColor: "#004c98",
                alignment: "left",
            },
            tableContent: {
                fontSize: 7,
                alignment: "left",
            },
        },
    };

    pdfMake.createPdf(docDefinition).download(`Archived Transactions`);
};
export default generateArchivedTransactionsPDF